diff --git a/Tests/__pycache__/test_WebElement_Charts.cpython-27-PYTEST.pyc b/Tests/__pycache__/test_WebElement_Charts.cpython-27-PYTEST.pyc
index 57b5193..7f6701c 100644
Binary files a/Tests/__pycache__/test_WebElement_Charts.cpython-27-PYTEST.pyc and b/Tests/__pycache__/test_WebElement_Charts.cpython-27-PYTEST.pyc differ
diff --git a/Tests/__pycache__/test_WebElement_Fields.cpython-27-PYTEST.pyc b/Tests/__pycache__/test_WebElement_Fields.cpython-27-PYTEST.pyc
index 5126d3d..5254cb4 100644
Binary files a/Tests/__pycache__/test_WebElement_Fields.cpython-27-PYTEST.pyc and b/Tests/__pycache__/test_WebElement_Fields.cpython-27-PYTEST.pyc differ
diff --git a/Tests/benchmark_WebElements.py b/Tests/benchmark_WebElements.py
index 2bb6889..c70bef3 100755
--- a/Tests/benchmark_WebElements.py
+++ b/Tests/benchmark_WebElements.py
@@ -3,15 +3,16 @@ import gc
 import sys
 import time
 
+from WebElements import UITemplate
 from WebElements.DictUtils import OrderedDict
-from WebElements.All import Factory
-from WebElements.Base import WebElement
+from WebElements.All import Factory, DOM
+from WebElements.Base import WebElement, TemplateElement, TextNode
 from WebElements.Layout import Box
 from WebElements.Resources import ScriptContainer
 
-results = {'loopedCreate':0.0, 'loopedInit':0.0, 'loopedToHtml':0.0,
-           'createAllOnce':0.0, 'longestCreationTime':0.0,
-           'nestedNodeCreation':0.0}
+results = {'loopedCreate':0.0, 'loopedInit':0.0, 'loopedToHtml':0.0, 'bigTable':0.0, 'bigTableSize':0.0,
+           'createAllOnce':0.0, 'longestCreationTime':0.0, 'nestedNodeCreation':0.0,
+           'templateInit':0.0, 'templateToHtml':0.0, 'templateToHtmlSize':0.0, 'templateCreate':0.0}
 
 def doneSection():
     sys.stdout.write(".")
@@ -43,6 +44,7 @@ def getGenerationTimeForAllElementsLooped100Times():
     allProducts.setScriptContainer(scripts)
     for x in xrange(100):
         doneSection()
+        results['loopedCreate'] = results['loopedInit'] + results['loopedToHtml']
         for product in Factory.products.keys():
             allProducts.addChildElement(Factory.build(product, 'Test', 'Product'))
     instantiationTime = time.time() - startTime
@@ -56,6 +58,47 @@ def getGenerationTimeForAllElementsLooped100Times():
     results['loopedToHtmlSize'] = len(html)
     results['loopedCreate'] = results['loopedInit'] + results['loopedToHtml']
 
+def getTemplateGenerationTimes():
+    template = "div#AllProducts\n"
+    templateElements = []
+    for product in Factory.products.keys():
+        template += "  > %(product)s#test%(product)s\n" % {'product': product}
+    template = UITemplate.fromSHPAML(template)
+
+    startTime = time.time()
+    for x in xrange(100):
+        templateElement = TemplateElement(template=template, factory=Factory)
+        templateElement.setScriptContainer(templateElement.addChildElement(ScriptContainer()))
+        templateElements.append(templateElement)
+        doneSection()
+    results['templateInit'] = time.time() - startTime
+
+    html = ""
+    startTime = time.time()
+    for templateElement in templateElements:
+        html += templateElement.toHtml()
+        doneSection()
+
+    generationTime = (time.time() - startTime)
+    results['templateToHtml'] = generationTime
+    results['templateToHtmlSize'] = len(html)
+    results['templateCreate'] = results['templateInit'] + results['templateToHtml']
+
+def getBigTableGenerationTime():
+    template = UITemplate.fromSHPAML("> dom-table#bigTableTest")
+    table = [dict(a=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8, i=9, j=10) for x in xrange(1000)]
+
+    startTime = time.time()
+    templateElement = TemplateElement(template=template, factory=Factory)
+    for rowData in table:
+        row = templateElement.bigTableTest.addChildElement(DOM.TR())
+        for data in rowData.itervalues():
+            row.addChildElement(DOM.TD()).addChildElement(TextNode(data))
+        doneSection()
+    html = templateElement.toHtml()
+    results['bigTable'] = time.time() - startTime
+    results['bigTableSize'] = len(html)
+
 def getNestedElementTime():
     startTime = time.time()
     rootElement = WebElement('root')
@@ -76,10 +119,17 @@ if __name__ == "__main__":
     doneSection()
     getGenerationTimeForAllElementsLooped100Times()
     gc.collect()
+    doneSection()
+    getTemplateGenerationTimes()
+    gc.collect()
     results['generationTimes'] = getSingleElementGenerationTimes()
     gc.collect()
     doneSection()
     getNestedElementTime()
+    gc.collect()
+    doneSection()
+    getBigTableGenerationTime()
+
     print "."
 
     print "######## Indvidual element generation times ########"
@@ -91,12 +141,22 @@ if __name__ == "__main__":
     print "######## Looped creation time (%d elements) ########" %  len(Factory.products.keys() * 100)
     print "    Instantiating Elements: " + str(results['loopedInit'])
     print "    Generating Html: " + str(results['loopedToHtml'])
-    print "    Html Size: " + str(results['loopedToHtmlSize'])
+    print "    Html Size: " + str(results['loopedToHtmlSize'] / 1024.0 / 1024.0) + " MB"
     print "    Total Time:" + str(results['loopedCreate'])
 
+    print "######## Template creation time (%d elements) ########" %  len(Factory.products.keys() * 100)
+    print "    Instantiating Template: " + str(results['templateInit'])
+    print "    Generating Html: " + str(results['templateToHtml'])
+    print "    Html Size: " + str(results['templateToHtmlSize'] / 1024.0 / 1024.0) + " MB"
+    print "    Total Time:" + str(results['templateCreate'])
+
     print "######## Nested element generation #########"
     print "    Generating 900 nested elements took: " + str(generationTime)
     print "    Html Size: ", results['nestedNodeSize']
+
+    print "######## Big table generation #########"
+    print "    Generating a 10X1000 table took: " + str(results['bigTable'])
+    print "    Html Size: ", str(results['bigTableSize'] / 1024.0 / 1024.0) + " MB"
     results['nestedGeneration'] = generationTime
 
     with open(".test_WebElements_Benchmark.results", 'w') as resultFile:
diff --git a/Tests/test_WebElement_Charts.py b/Tests/test_WebElement_Charts.py
index 6a852e5..f5a3d83 100755
--- a/Tests/test_WebElement_Charts.py
+++ b/Tests/test_WebElement_Charts.py
@@ -57,31 +57,31 @@ class TestPieChart(ChartTester):
 
     def setup_class(self):
         print "Called"
-        self.element = Factory.build("Charts.PieChart")
+        self.element = Factory.build("Charts-PieChart")
 
 
 class TestPieChart3D(ChartTester):
 
     def setup_class(self):
-        self.element = Factory.build("Charts.PieChart3D")
+        self.element = Factory.build("Charts-PieChart3D")
 
 
 class TestHorizontalBarChart(ChartTester):
 
     def setup_class(self):
-        self.element = Factory.build("Charts.HorizontalBarChart")
+        self.element = Factory.build("Charts-HorizontalBarChart")
 
 
 class TestVerticalBarChart(ChartTester):
 
     def setup_class(self):
-        self.element = Factory.build("Charts.VerticalBarChart")
+        self.element = Factory.build("Charts-VerticalBarChart")
 
 
 class TestLineChart(ChartTester):
 
     def setup_class(self):
-        self.element = Factory.build("Charts.LineChart")
+        self.element = Factory.build("Charts-LineChart")
 
 if __name__ == "__main__":
     import subprocess
diff --git a/Tests/test_WebElement_Fields.py b/Tests/test_WebElement_Fields.py
index 8f85b09..1affc26 100755
--- a/Tests/test_WebElement_Fields.py
+++ b/Tests/test_WebElement_Fields.py
@@ -27,7 +27,7 @@ class TestTextAreaField(ElementTester):
 class TestAutoField(ElementTester):
 
     def setup_class(self):
-        self.element = Factory.build("Fields.AutoField", "Test")
+        self.element = Factory.build("Fields-AutoField", "Test")
 
     def test_label(self):
         assert type(self.element.label) == Label
diff --git a/WebElements/Base.py b/WebElements/Base.py
index 0bed5a6..27537c5 100755
--- a/WebElements/Base.py
+++ b/WebElements/Base.py
@@ -9,6 +9,7 @@
 
 import re
 import types
+from itertools import chain
 
 import DictUtils
 import ToClientSide
@@ -530,12 +531,12 @@ class WebElement(Connectable):
         if not self.tagName:
             return u''
 
-        self.attributes['name'] = self.fullName()
-        self.attributes['id'] = self.fullId()
-        self.attributes['class'] = self.classes
-        self.attributes['style'] = self.style
+        nativeAttributes = (('name', self.fullName()),
+                            ('id', self.fullId()),
+                            ('class', self.classes),
+                            ('style', self.style))
         startTag = "<" + self.tagName + " "
-        for key, value in self.attributes.iteritems():
+        for key, value in chain(nativeAttributes, self.attributes.iteritems()):
             value = interpretAsString(value)
             if value:
                 if value == '<BLANK>':
@@ -561,25 +562,18 @@ class WebElement(Connectable):
         if self.tagSelfCloses or not self.tagName:
             return u''
 
-        return unicode("</" + self.tagName + ">")
+        return unicode("".join(("</", self.tagName, ">")))
 
     def content(self, formatted=False):
         """
             returns the elements html content
             (the html bettween startTag and endTag)
         """
-        elementContent = []
-        for element in self.childElements:
-            if type(element) in (types.FunctionType, types.MethodType):
-                currentElement = element()
-            else:
-                currentElement = element
-
-            elementContent.append(currentElement.toHtml(formatted=formatted))
+        elements = [element.toHtml() for element in self.childElements]
         if formatted:
-            return "\n".join(elementContent)
+            return "\n".join(elements)
         else:
-            return ''.join(elementContent)
+            return ''.join(elements)
 
     def insertVariables(self, variableDict=None):
         """
@@ -708,32 +702,20 @@ class WebElement(Connectable):
 
         self.emit("beforeToHtml")
 
-        html = []
-        startTag = self.startTag() or ''
-        if startTag:
-            html.append(startTag)
-
-        content = self.content(formatted=formatted)
-        if content:
-            if formatted:
-                self._insertFormattedContent(content, html)
-            else:
-                html.append(content)
-
-        endTag = self.endTag() or ''
-        if endTag:
-            html.append(endTag)
+        data = (self.startTag() or '', formatted and self._formattedContent() or self.content(), self.endTag() or '')
 
         if formatted:
-            html = "\n".join(html)
+            html = "\n".join(data)
         else:
-            html = "".join(html)
+            html = "".join(data)
 
         return html
 
-    def _insertFormattedContent(self, content, html):
-        for line in content.split("\n"):
+    def _formattedContent(self):
+        html = []
+        for line in self.content().split("\n"):
             html.append(INDENTATION + line)
+        return "\n".join(html)
 
     def isBlockElement(self):
         """
diff --git a/WebElements/Base.pyc b/WebElements/Base.pyc
index 7e9d1ce..a76e3d5 100644
Binary files a/WebElements/Base.pyc and b/WebElements/Base.pyc differ
diff --git a/WebElements/Buttons.py b/WebElements/Buttons.py
index 13c01a6..52d798b 100755
--- a/WebElements/Buttons.py
+++ b/WebElements/Buttons.py
@@ -327,7 +327,7 @@ class ToggleButton(Layout.Box):
         return self.button.value()
 
     def setProperties(self, valueDict=None):
-        Layout.Box.insertVariables(self, valueDict)
+        Layout.Box.setProperties(self, valueDict)
         self.button.setProperties(valueDict)
 
     def insertVariables(self, valueDict=None):
diff --git a/WebElements/Factory.py b/WebElements/Factory.py
index 262dfab..889c935 100755
--- a/WebElements/Factory.py
+++ b/WebElements/Factory.py
@@ -109,4 +109,4 @@ class Composite(Factory):
             self.products.update(factory.products)
             if factory.name:
                 for productName, product in factory.products.iteritems():
-                    self.products[factory.name.lower() + "." + productName] = product
+                    self.products[factory.name.lower() + "-" + productName] = product
diff --git a/WebElements/Factory.pyc b/WebElements/Factory.pyc
index 8a1e292..3e21fda 100644
Binary files a/WebElements/Factory.pyc and b/WebElements/Factory.pyc differ
diff --git a/WebElements/Parser.py b/WebElements/Parser.py
index ae43374..8ccea25 100755
--- a/WebElements/Parser.py
+++ b/WebElements/Parser.py
@@ -49,14 +49,17 @@ class WebElementTree(WebElement):
     def __representSelf__(self):
         return WebElement.__representSelf__(self).replace('WebElementTree', self.tagName)
 
-    def _insertFormattedContent(self, content, html):
+    def _formattedContent(self,):
+        html = []
         if self.parent:
-            for line in content.split("\n"):
+            for line in self.content().split("\n"):
                 html.append(Base.INDENTATION + line)
         else:
-            for line in content.split("\n"):
+            for line in self.content()split("\n"):
                 html.append(line)
 
+        return "\n".join(html)
+
     def html(self):
         """
             Returns the supplied html
diff --git a/WebElements/StringUtils.py b/WebElements/StringUtils.py
index f48e67f..d64f9b6 100755
--- a/WebElements/StringUtils.py
+++ b/WebElements/StringUtils.py
@@ -68,12 +68,7 @@ def removeAlphas(value):
 
 
 def convertIterableToString(iterable):
-    newValues = []
-    for item in iterable:
-        item = interpretAsString(item)
-        if item is not None:
-            newValues.append(item)
-    return ' '.join(newValues)
+    return ' '.join([interpretAsString(item) for item in iterable if item is not None])
 
 def convertBoolToString(boolean):
     return unicode(boolean).lower()
diff --git a/WebElements/StringUtils.pyc b/WebElements/StringUtils.pyc
index 198a540..419f762 100644
Binary files a/WebElements/StringUtils.pyc and b/WebElements/StringUtils.pyc differ
